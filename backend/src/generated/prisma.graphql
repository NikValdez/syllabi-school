# source: https://us1.prisma.sh/nikvaldez-073802/schedule/dev
# timestamp: Thu Jan 10 2019 15:27:02 GMT-0800 (PST)

type AggregateCourse {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateMyCourse {
  count: Int!
}

type AggregateNote {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Course implements Node {
  id: ID!
  title: String!
  description: String!
  courseCode: String!
  credits: Int
  image: String
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  user: User!
  myCourse: MyCourse
}

"""A connection to a list of items."""
type CourseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  title: String!
  description: String!
  courseCode: String!
  credits: Int
  image: String
  events: EventCreateManyWithoutCourseInput
  user: UserCreateOneWithoutCoursesInput!
  myCourse: MyCourseCreateOneWithoutCoursesInput
}

input CourseCreateManyWithoutUserInput {
  create: [CourseCreateWithoutUserInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateOneWithoutEventsInput {
  create: CourseCreateWithoutEventsInput
  connect: CourseWhereUniqueInput
}

input CourseCreateOneWithoutMyCourseInput {
  create: CourseCreateWithoutMyCourseInput
  connect: CourseWhereUniqueInput
}

input CourseCreateWithoutEventsInput {
  title: String!
  description: String!
  courseCode: String!
  credits: Int
  image: String
  user: UserCreateOneWithoutCoursesInput!
  myCourse: MyCourseCreateOneWithoutCoursesInput
}

input CourseCreateWithoutMyCourseInput {
  title: String!
  description: String!
  courseCode: String!
  credits: Int
  image: String
  events: EventCreateManyWithoutCourseInput
  user: UserCreateOneWithoutCoursesInput!
}

input CourseCreateWithoutUserInput {
  title: String!
  description: String!
  courseCode: String!
  credits: Int
  image: String
  events: EventCreateManyWithoutCourseInput
  myCourse: MyCourseCreateOneWithoutCoursesInput
}

"""An edge in a connection."""
type CourseEdge {
  """The item at the end of the edge."""
  node: Course!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  courseCode_ASC
  courseCode_DESC
  credits_ASC
  credits_DESC
  image_ASC
  image_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CoursePreviousValues {
  id: ID!
  title: String!
  description: String!
  courseCode: String!
  credits: Int
  image: String
}

input CourseScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  courseCode: String

  """All values that are not equal to given value."""
  courseCode_not: String

  """All values that are contained in given list."""
  courseCode_in: [String!]

  """All values that are not contained in given list."""
  courseCode_not_in: [String!]

  """All values less than the given value."""
  courseCode_lt: String

  """All values less than or equal the given value."""
  courseCode_lte: String

  """All values greater than the given value."""
  courseCode_gt: String

  """All values greater than or equal the given value."""
  courseCode_gte: String

  """All values containing the given string."""
  courseCode_contains: String

  """All values not containing the given string."""
  courseCode_not_contains: String

  """All values starting with the given string."""
  courseCode_starts_with: String

  """All values not starting with the given string."""
  courseCode_not_starts_with: String

  """All values ending with the given string."""
  courseCode_ends_with: String

  """All values not ending with the given string."""
  courseCode_not_ends_with: String
  credits: Int

  """All values that are not equal to given value."""
  credits_not: Int

  """All values that are contained in given list."""
  credits_in: [Int!]

  """All values that are not contained in given list."""
  credits_not_in: [Int!]

  """All values less than the given value."""
  credits_lt: Int

  """All values less than or equal the given value."""
  credits_lte: Int

  """All values greater than the given value."""
  credits_gt: Int

  """All values greater than or equal the given value."""
  credits_gte: Int
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
}

input CourseUpdateInput {
  title: String
  description: String
  courseCode: String
  credits: Int
  image: String
  events: EventUpdateManyWithoutCourseInput
  user: UserUpdateOneRequiredWithoutCoursesInput
  myCourse: MyCourseUpdateOneWithoutCoursesInput
}

input CourseUpdateManyDataInput {
  title: String
  description: String
  courseCode: String
  credits: Int
  image: String
}

input CourseUpdateManyMutationInput {
  title: String
  description: String
  courseCode: String
  credits: Int
  image: String
}

input CourseUpdateManyWithoutUserInput {
  create: [CourseCreateWithoutUserInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
  deleteMany: [CourseScalarWhereInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutUserInput!]
}

input CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput!
  data: CourseUpdateManyDataInput!
}

input CourseUpdateOneRequiredWithoutEventsInput {
  create: CourseCreateWithoutEventsInput
  connect: CourseWhereUniqueInput
  update: CourseUpdateWithoutEventsDataInput
  upsert: CourseUpsertWithoutEventsInput
}

input CourseUpdateOneWithoutMyCourseInput {
  create: CourseCreateWithoutMyCourseInput
  connect: CourseWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CourseUpdateWithoutMyCourseDataInput
  upsert: CourseUpsertWithoutMyCourseInput
}

input CourseUpdateWithoutEventsDataInput {
  title: String
  description: String
  courseCode: String
  credits: Int
  image: String
  user: UserUpdateOneRequiredWithoutCoursesInput
  myCourse: MyCourseUpdateOneWithoutCoursesInput
}

input CourseUpdateWithoutMyCourseDataInput {
  title: String
  description: String
  courseCode: String
  credits: Int
  image: String
  events: EventUpdateManyWithoutCourseInput
  user: UserUpdateOneRequiredWithoutCoursesInput
}

input CourseUpdateWithoutUserDataInput {
  title: String
  description: String
  courseCode: String
  credits: Int
  image: String
  events: EventUpdateManyWithoutCourseInput
  myCourse: MyCourseUpdateOneWithoutCoursesInput
}

input CourseUpdateWithWhereUniqueWithoutUserInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutUserDataInput!
}

input CourseUpsertWithoutEventsInput {
  update: CourseUpdateWithoutEventsDataInput!
  create: CourseCreateWithoutEventsInput!
}

input CourseUpsertWithoutMyCourseInput {
  update: CourseUpdateWithoutMyCourseDataInput!
  create: CourseCreateWithoutMyCourseInput!
}

input CourseUpsertWithWhereUniqueWithoutUserInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutUserDataInput!
  create: CourseCreateWithoutUserInput!
}

input CourseWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  courseCode: String

  """All values that are not equal to given value."""
  courseCode_not: String

  """All values that are contained in given list."""
  courseCode_in: [String!]

  """All values that are not contained in given list."""
  courseCode_not_in: [String!]

  """All values less than the given value."""
  courseCode_lt: String

  """All values less than or equal the given value."""
  courseCode_lte: String

  """All values greater than the given value."""
  courseCode_gt: String

  """All values greater than or equal the given value."""
  courseCode_gte: String

  """All values containing the given string."""
  courseCode_contains: String

  """All values not containing the given string."""
  courseCode_not_contains: String

  """All values starting with the given string."""
  courseCode_starts_with: String

  """All values not starting with the given string."""
  courseCode_not_starts_with: String

  """All values ending with the given string."""
  courseCode_ends_with: String

  """All values not ending with the given string."""
  courseCode_not_ends_with: String
  credits: Int

  """All values that are not equal to given value."""
  credits_not: Int

  """All values that are contained in given list."""
  credits_in: [Int!]

  """All values that are not contained in given list."""
  credits_not_in: [Int!]

  """All values less than the given value."""
  credits_lt: Int

  """All values less than or equal the given value."""
  credits_lte: Int

  """All values greater than the given value."""
  credits_gt: Int

  """All values greater than or equal the given value."""
  credits_gte: Int
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  user: UserWhereInput
  myCourse: MyCourseWhereInput
}

input CourseWhereUniqueInput {
  id: ID
}

scalar DateTime

type Event implements Node {
  id: ID!
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  allDay: Boolean
  upload: String
  course: Course!
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  allDay: Boolean
  upload: String
  course: CourseCreateOneWithoutEventsInput!
}

input EventCreateManyWithoutCourseInput {
  create: [EventCreateWithoutCourseInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutCourseInput {
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  allDay: Boolean
  upload: String
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  start_ASC
  start_DESC
  end_ASC
  end_DESC
  allDay_ASC
  allDay_DESC
  upload_ASC
  upload_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventPreviousValues {
  id: ID!
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  allDay: Boolean
  upload: String
}

input EventScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EventScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  start: DateTime

  """All values that are not equal to given value."""
  start_not: DateTime

  """All values that are contained in given list."""
  start_in: [DateTime!]

  """All values that are not contained in given list."""
  start_not_in: [DateTime!]

  """All values less than the given value."""
  start_lt: DateTime

  """All values less than or equal the given value."""
  start_lte: DateTime

  """All values greater than the given value."""
  start_gt: DateTime

  """All values greater than or equal the given value."""
  start_gte: DateTime
  end: DateTime

  """All values that are not equal to given value."""
  end_not: DateTime

  """All values that are contained in given list."""
  end_in: [DateTime!]

  """All values that are not contained in given list."""
  end_not_in: [DateTime!]

  """All values less than the given value."""
  end_lt: DateTime

  """All values less than or equal the given value."""
  end_lte: DateTime

  """All values greater than the given value."""
  end_gt: DateTime

  """All values greater than or equal the given value."""
  end_gte: DateTime
  allDay: Boolean

  """All values that are not equal to given value."""
  allDay_not: Boolean
  upload: String

  """All values that are not equal to given value."""
  upload_not: String

  """All values that are contained in given list."""
  upload_in: [String!]

  """All values that are not contained in given list."""
  upload_not_in: [String!]

  """All values less than the given value."""
  upload_lt: String

  """All values less than or equal the given value."""
  upload_lte: String

  """All values greater than the given value."""
  upload_gt: String

  """All values greater than or equal the given value."""
  upload_gte: String

  """All values containing the given string."""
  upload_contains: String

  """All values not containing the given string."""
  upload_not_contains: String

  """All values starting with the given string."""
  upload_starts_with: String

  """All values not starting with the given string."""
  upload_not_starts_with: String

  """All values ending with the given string."""
  upload_ends_with: String

  """All values not ending with the given string."""
  upload_not_ends_with: String
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateInput {
  title: String
  description: String
  start: DateTime
  end: DateTime
  allDay: Boolean
  upload: String
  course: CourseUpdateOneRequiredWithoutEventsInput
}

input EventUpdateManyDataInput {
  title: String
  description: String
  start: DateTime
  end: DateTime
  allDay: Boolean
  upload: String
}

input EventUpdateManyMutationInput {
  title: String
  description: String
  start: DateTime
  end: DateTime
  allDay: Boolean
  upload: String
}

input EventUpdateManyWithoutCourseInput {
  create: [EventCreateWithoutCourseInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutCourseInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  deleteMany: [EventScalarWhereInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutCourseInput!]
}

input EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyDataInput!
}

input EventUpdateWithoutCourseDataInput {
  title: String
  description: String
  start: DateTime
  end: DateTime
  allDay: Boolean
  upload: String
}

input EventUpdateWithWhereUniqueWithoutCourseInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutCourseDataInput!
}

input EventUpsertWithWhereUniqueWithoutCourseInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutCourseDataInput!
  create: EventCreateWithoutCourseInput!
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  start: DateTime

  """All values that are not equal to given value."""
  start_not: DateTime

  """All values that are contained in given list."""
  start_in: [DateTime!]

  """All values that are not contained in given list."""
  start_not_in: [DateTime!]

  """All values less than the given value."""
  start_lt: DateTime

  """All values less than or equal the given value."""
  start_lte: DateTime

  """All values greater than the given value."""
  start_gt: DateTime

  """All values greater than or equal the given value."""
  start_gte: DateTime
  end: DateTime

  """All values that are not equal to given value."""
  end_not: DateTime

  """All values that are contained in given list."""
  end_in: [DateTime!]

  """All values that are not contained in given list."""
  end_not_in: [DateTime!]

  """All values less than the given value."""
  end_lt: DateTime

  """All values less than or equal the given value."""
  end_lte: DateTime

  """All values greater than the given value."""
  end_gt: DateTime

  """All values greater than or equal the given value."""
  end_gte: DateTime
  allDay: Boolean

  """All values that are not equal to given value."""
  allDay_not: Boolean
  upload: String

  """All values that are not equal to given value."""
  upload_not: String

  """All values that are contained in given list."""
  upload_in: [String!]

  """All values that are not contained in given list."""
  upload_not_in: [String!]

  """All values less than the given value."""
  upload_lt: String

  """All values less than or equal the given value."""
  upload_lte: String

  """All values greater than the given value."""
  upload_gt: String

  """All values greater than or equal the given value."""
  upload_gte: String

  """All values containing the given string."""
  upload_contains: String

  """All values not containing the given string."""
  upload_not_contains: String

  """All values starting with the given string."""
  upload_starts_with: String

  """All values not starting with the given string."""
  upload_not_starts_with: String

  """All values ending with the given string."""
  upload_ends_with: String

  """All values not ending with the given string."""
  upload_not_ends_with: String
  course: CourseWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createNote(data: NoteCreateInput!): Note!
  createCourse(data: CourseCreateInput!): Course!
  createMyCourse(data: MyCourseCreateInput!): MyCourse!
  createEvent(data: EventCreateInput!): Event!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateNote(data: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateMyCourse(data: MyCourseUpdateInput!, where: MyCourseWhereUniqueInput!): MyCourse
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  deleteUser(where: UserWhereUniqueInput!): User
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteMyCourse(where: MyCourseWhereUniqueInput!): MyCourse
  deleteEvent(where: EventWhereUniqueInput!): Event
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertNote(where: NoteWhereUniqueInput!, create: NoteCreateInput!, update: NoteUpdateInput!): Note!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  upsertMyCourse(where: MyCourseWhereUniqueInput!, create: MyCourseCreateInput!, update: MyCourseUpdateInput!): MyCourse!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyNotes(data: NoteUpdateManyMutationInput!, where: NoteWhereInput): BatchPayload!
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyNotes(where: NoteWhereInput): BatchPayload!
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  deleteManyMyCourses(where: MyCourseWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type MyCourse implements Node {
  id: ID!
  user: User!
  courses: Course
}

"""A connection to a list of items."""
type MyCourseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MyCourseEdge]!
  aggregate: AggregateMyCourse!
}

input MyCourseCreateInput {
  user: UserCreateOneWithoutMyCoursesInput!
  courses: CourseCreateOneWithoutMyCourseInput
}

input MyCourseCreateManyWithoutUserInput {
  create: [MyCourseCreateWithoutUserInput!]
  connect: [MyCourseWhereUniqueInput!]
}

input MyCourseCreateOneWithoutCoursesInput {
  create: MyCourseCreateWithoutCoursesInput
  connect: MyCourseWhereUniqueInput
}

input MyCourseCreateWithoutCoursesInput {
  user: UserCreateOneWithoutMyCoursesInput!
}

input MyCourseCreateWithoutUserInput {
  courses: CourseCreateOneWithoutMyCourseInput
}

"""An edge in a connection."""
type MyCourseEdge {
  """The item at the end of the edge."""
  node: MyCourse!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MyCourseOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MyCoursePreviousValues {
  id: ID!
}

input MyCourseScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [MyCourseScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [MyCourseScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MyCourseScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type MyCourseSubscriptionPayload {
  mutation: MutationType!
  node: MyCourse
  updatedFields: [String!]
  previousValues: MyCoursePreviousValues
}

input MyCourseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MyCourseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MyCourseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MyCourseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MyCourseWhereInput
}

input MyCourseUpdateInput {
  user: UserUpdateOneRequiredWithoutMyCoursesInput
  courses: CourseUpdateOneWithoutMyCourseInput
}

input MyCourseUpdateManyWithoutUserInput {
  create: [MyCourseCreateWithoutUserInput!]
  connect: [MyCourseWhereUniqueInput!]
  set: [MyCourseWhereUniqueInput!]
  disconnect: [MyCourseWhereUniqueInput!]
  delete: [MyCourseWhereUniqueInput!]
  update: [MyCourseUpdateWithWhereUniqueWithoutUserInput!]
  deleteMany: [MyCourseScalarWhereInput!]
  upsert: [MyCourseUpsertWithWhereUniqueWithoutUserInput!]
}

input MyCourseUpdateOneWithoutCoursesInput {
  create: MyCourseCreateWithoutCoursesInput
  connect: MyCourseWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MyCourseUpdateWithoutCoursesDataInput
  upsert: MyCourseUpsertWithoutCoursesInput
}

input MyCourseUpdateWithoutCoursesDataInput {
  user: UserUpdateOneRequiredWithoutMyCoursesInput
}

input MyCourseUpdateWithoutUserDataInput {
  courses: CourseUpdateOneWithoutMyCourseInput
}

input MyCourseUpdateWithWhereUniqueWithoutUserInput {
  where: MyCourseWhereUniqueInput!
  data: MyCourseUpdateWithoutUserDataInput!
}

input MyCourseUpsertWithoutCoursesInput {
  update: MyCourseUpdateWithoutCoursesDataInput!
  create: MyCourseCreateWithoutCoursesInput!
}

input MyCourseUpsertWithWhereUniqueWithoutUserInput {
  where: MyCourseWhereUniqueInput!
  update: MyCourseUpdateWithoutUserDataInput!
  create: MyCourseCreateWithoutUserInput!
}

input MyCourseWhereInput {
  """Logical AND on all given filters."""
  AND: [MyCourseWhereInput!]

  """Logical OR on all given filters."""
  OR: [MyCourseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MyCourseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user: UserWhereInput
  courses: CourseWhereInput
}

input MyCourseWhereUniqueInput {
  id: ID
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Note implements Node {
  id: ID!
  note: String!
  user: User!
}

"""A connection to a list of items."""
type NoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NoteEdge]!
  aggregate: AggregateNote!
}

input NoteCreateInput {
  note: String!
  user: UserCreateOneWithoutNotesInput!
}

input NoteCreateManyWithoutUserInput {
  create: [NoteCreateWithoutUserInput!]
  connect: [NoteWhereUniqueInput!]
}

input NoteCreateWithoutUserInput {
  note: String!
}

"""An edge in a connection."""
type NoteEdge {
  """The item at the end of the edge."""
  node: Note!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NoteOrderByInput {
  id_ASC
  id_DESC
  note_ASC
  note_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type NotePreviousValues {
  id: ID!
  note: String!
}

input NoteScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [NoteScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [NoteScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NoteScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
}

type NoteSubscriptionPayload {
  mutation: MutationType!
  node: Note
  updatedFields: [String!]
  previousValues: NotePreviousValues
}

input NoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NoteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NoteWhereInput
}

input NoteUpdateInput {
  note: String
  user: UserUpdateOneRequiredWithoutNotesInput
}

input NoteUpdateManyDataInput {
  note: String
}

input NoteUpdateManyMutationInput {
  note: String
}

input NoteUpdateManyWithoutUserInput {
  create: [NoteCreateWithoutUserInput!]
  connect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  delete: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [NoteUpdateManyWithWhereNestedInput!]
  deleteMany: [NoteScalarWhereInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutUserInput!]
}

input NoteUpdateManyWithWhereNestedInput {
  where: NoteScalarWhereInput!
  data: NoteUpdateManyDataInput!
}

input NoteUpdateWithoutUserDataInput {
  note: String
}

input NoteUpdateWithWhereUniqueWithoutUserInput {
  where: NoteWhereUniqueInput!
  data: NoteUpdateWithoutUserDataInput!
}

input NoteUpsertWithWhereUniqueWithoutUserInput {
  where: NoteWhereUniqueInput!
  update: NoteUpdateWithoutUserDataInput!
  create: NoteCreateWithoutUserInput!
}

input NoteWhereInput {
  """Logical AND on all given filters."""
  AND: [NoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [NoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  user: UserWhereInput
}

input NoteWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  TEACHER
  PERMISSIONUPDATE
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note]!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  myCourses(where: MyCourseWhereInput, orderBy: MyCourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MyCourse]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  user(where: UserWhereUniqueInput!): User
  note(where: NoteWhereUniqueInput!): Note
  course(where: CourseWhereUniqueInput!): Course
  myCourse(where: MyCourseWhereUniqueInput!): MyCourse
  event(where: EventWhereUniqueInput!): Event
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  notesConnection(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NoteConnection!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  myCoursesConnection(where: MyCourseWhereInput, orderBy: MyCourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MyCourseConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  note(where: NoteSubscriptionWhereInput): NoteSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  myCourse(where: MyCourseSubscriptionWhereInput): MyCourseSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  myCourses(where: MyCourseWhereInput, orderBy: MyCourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MyCourse!]
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  courses: CourseCreateManyWithoutUserInput
  myCourses: MyCourseCreateManyWithoutUserInput
  notes: NoteCreateManyWithoutUserInput
}

input UserCreateOneWithoutCoursesInput {
  create: UserCreateWithoutCoursesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMyCoursesInput {
  create: UserCreateWithoutMyCoursesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNotesInput {
  create: UserCreateWithoutNotesInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutCoursesInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  myCourses: MyCourseCreateManyWithoutUserInput
  notes: NoteCreateManyWithoutUserInput
}

input UserCreateWithoutMyCoursesInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  courses: CourseCreateManyWithoutUserInput
  notes: NoteCreateManyWithoutUserInput
}

input UserCreateWithoutNotesInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  courses: CourseCreateManyWithoutUserInput
  myCourses: MyCourseCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  courses: CourseUpdateManyWithoutUserInput
  myCourses: MyCourseUpdateManyWithoutUserInput
  notes: NoteUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredWithoutCoursesInput {
  create: UserCreateWithoutCoursesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCoursesDataInput
  upsert: UserUpsertWithoutCoursesInput
}

input UserUpdateOneRequiredWithoutMyCoursesInput {
  create: UserCreateWithoutMyCoursesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutMyCoursesDataInput
  upsert: UserUpsertWithoutMyCoursesInput
}

input UserUpdateOneRequiredWithoutNotesInput {
  create: UserCreateWithoutNotesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutNotesDataInput
  upsert: UserUpsertWithoutNotesInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutCoursesDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  myCourses: MyCourseUpdateManyWithoutUserInput
  notes: NoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutMyCoursesDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  courses: CourseUpdateManyWithoutUserInput
  notes: NoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutNotesDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  courses: CourseUpdateManyWithoutUserInput
  myCourses: MyCourseUpdateManyWithoutUserInput
}

input UserUpsertWithoutCoursesInput {
  update: UserUpdateWithoutCoursesDataInput!
  create: UserCreateWithoutCoursesInput!
}

input UserUpsertWithoutMyCoursesInput {
  update: UserUpdateWithoutMyCoursesDataInput!
  create: UserCreateWithoutMyCoursesInput!
}

input UserUpsertWithoutNotesInput {
  update: UserUpdateWithoutNotesDataInput!
  create: UserCreateWithoutNotesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
  myCourses_every: MyCourseWhereInput
  myCourses_some: MyCourseWhereInput
  myCourses_none: MyCourseWhereInput
  notes_every: NoteWhereInput
  notes_some: NoteWhereInput
  notes_none: NoteWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
